#include<iostream>
#include <fstream>
using namespace std;

class Shape {
public:
    virtual double area() const = 0;
    virtual void display() = 0;
    virtual void writeToFile(ofstream& out) const = 0;
    virtual ~Shape(){}
};

class Triangle: public Shape{
    int x1, y1, x2, y2, x3, y3;
public:
    Triangle(int a1, int b1, int a2, int b2, int a3, int b3)
        : x1(a1), y1(b1), x2(a2), y2(b2), x3(a3), y3(b3) {}

    void display() override{
        cout<< "Triangle: (" << x1 << "," << y1 <<"), ("<< x2 << ","<< y2 <<"), ("<< x3 <<","<< y3 <<")"<<endl;
    }

    double area() const override{
        return 0.5 * (abs(x1 * (y2 - y3) + x2 * (y3-y1) + x3 * (y1 - y2)));
    }

    void writeToFile(ofstream& out) const override{
        out<<"t " << x1 << " " << y1 << " " << x2 << " " << y2 << " " << x3 << " " << y3;
    }
};


class Rectangle: public Shape{
    int x1, y1, x2, y2;
public:
    Rectangle(int a1, int b1, int a2, int b2) : x1(a1), y1(b1), x2(a2), y2(b2){}

    void display() override{
         cout<< "Rectangle: (" << x1 << "," << y1 <<"), ("<< x2 << ","<< y2 <<")"<<endl;
    }

    double area()const override{
        return abs((x2 - x1) * (y2 - y1));
    }

    void writeToFile(ofstream& out) const override{
        out<<"r "<< x1 << " " << y1 << " " << x2 << " " << y2 << " ";
    }
};

class Square : public Shape{
     int x1, y1, x2, y2;
public:
    Square(int a1, int b1, int a2, int b2) : x1(a1), y1(b1), x2(a2), y2(b2){}

    void display() override{
         cout<< "Square: (" << x1 << "," << y1 <<"), ("<< x2 << ","<< y2 <<")"<<endl;
    }

    double area()const override{
        return abs((x2 - x1) * (y2 - y1));
    }

    void writeToFile(ofstream& out) const override{
        out<<"s "<< x1 << " " << y1 << " " << x2 << " " << y2 << " ";
    }
};

int main()
{
    Shape* shapes[100];
    double areas[100];
    int shapeCount = 0;

    ifstream inFile("input.txt");
    if (!inFile){
        cout<<"error opening file!"<<endl;
        return 1;
    }
    int n;
    inFile >> n;

    char type;

    for(int i = 0; i < n; i++){
        inFile >> type;
        if (type == 't'){
            int x1, y1, x2, y2, x3, y3;
            inFile >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
            shapes[shapeCount] = new Triangle(x1, y1, x2, y2, x3, y3);
        }
        else if (type == 'r'){
            int x1, y1, x2, y2;
            inFile >> x1 >> y1 >> x2 >> y2;
            shapes[shapeCount] = new Rectangle(x1, y1, x2, y2);
        }
        else if (type == 's'){
            int x1, y1, x2, y2;
            inFile >> x1 >> y1 >> x2 >> y2;
            shapes[shapeCount] = new Square(x1, y1, x2, y2);
        }
        else {
            cout<<"Unknown shape type: " << type << endl;
        }

        areas[shapeCount] = shapes[shapeCount]->area();
        shapeCount++;
    }

    for (int i = 0; i < shapeCount; i++){
        for (int j = i + 1; j < shapeCount; j++){
            if (areas[i] < areas[j]){
                swap(areas[i], areas[j]);
                swap(shapes[i], shapes[j]);
            }
        }
    }

    for (int i = 0; i < shapeCount; i++){
        shapes[i]->display();               // Optional display
        cout << "Area: " << areas[i] << endl;
    }


    ofstream outFile("output.txt");
    outFile << shapeCount << endl;

    for (int i = 0; i < shapeCount; i++){
        shapes[i]->writeToFile(outFile);
        outFile << "->" << areas[i] << endl;
    }

    for(int i = 0; i < shapeCount; i++){
        delete shapes[i];
    }

    return 0;
}
