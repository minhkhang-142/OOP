#include <iostream>
#include <cmath>
using namespace std;

class Complex
{
private:
    double real, imaginary;
public:
    Complex(){      //default constructor
        real = 0;
        imaginary = 0;
    }

    Complex(double r, double i){ //constructor with parameter
        real = r;
        imaginary = i;
    }


    double modulus()const {
        return sqrt(real * real + imaginary * imaginary);
    }

    bool operator >(const Complex& other)const{
        return modulus() > other.modulus();
    }

    Complex& operator = (const Complex& other){
        if (this != &other){
            real = other.real;
            imaginary = other.imaginary;
        }
        return *this;
    }
    void display(){
        cout << real << " + " << imaginary <<"i" <<endl;
    }
};


int main()
{
    int n;
    cout<<"how many complex number you want: "<<endl;
    cin>>n;

    Complex arr[n];

    cout<<"enter your complex number: "<<endl;

    for(int i = 0; i < n; i++){
        double r, im;
        cout<<"complex number "<< i + 1 <<": "<< endl;
        cin>> r >> im;
        arr[i] = Complex(r,im);
    }

    cout<<"your complex number: "<<endl;
    for(int i = 0; i < n - 1; i++){
        for(int j = 0; j < n - i - 1; j++){
            if(!(arr[j] > arr[j + 1])){ // have to put arr[j] & [j+1] in ()
                Complex temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    for(int i = 0; i < n; i++){
        arr[i].display();
    }

    return 0;
}
