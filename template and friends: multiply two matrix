#include <iostream>
using namespace std;

const int max_size = 100;

template <typename T>
class Matrix;

template <typename T>
Matrix<T> multiply(const Matrix<T>& a, const Matrix<T>& b);


template <typename T>
class Matrix
{
private:
    T data[max_size][max_size];
    int rows, cols;

public:
    Matrix(int r = 0, int c = 0)
    {
        rows = r;
        cols = c;
    }

    void read(){
        cout << "Enter " << rows << " Ã— " << cols << " matrix values:\n";
        for (int i = 0; i < rows; i++){
            for (int j = 0; j < cols; j++){
                cin>>data[i][j];
            }
        }
    }

    void display() const{
        cout<<"matrix: \n";
        for (int i = 0; i < rows; i++){
            for (int j = 0; j < cols; j++){
                cout<<data[i][j] << " ";
            }
             cout<< endl;
        }
    }

    friend Matrix<T> multiply<>(const Matrix<T>& a, const Matrix<T>& b);
};

template <typename T>
Matrix<T> multiply(const Matrix<T>& a, const Matrix<T>& b){
    if(a.cols != b.rows){
        cout<<"Matrix dimensions incompatible for multiplication\n";
        exit(1);
    }

    Matrix<T> result(a.rows, b.cols);

    for(int i = 0; i < a.rows; i++){
        for(int j = 0; j < b.cols; j++){
            result.data[i][j] = 0;
            for(int k = 0; k < a.cols; k++){
                result.data[i][j] += a.data[i][k] * b.data[k][j];
            }
        }
    }
    return result;
}



int main()
{
    Matrix<int> A(2,3), B(3,2), C;
    A.read();
    B.read();
    C = multiply(A, B);
    C.display();

    return 0;
}
